import React from "react";
import "./App.css";
import UserList from "./components/UserList";
import TodoList from "./components/TodoList";

export default function App() {
  return (
    <div className="App">
      <div className="content_app">
        <UserList />
        <TodoList />
      </div>

      <div className="content_about">
        <h3>О приложении</h3>
        <p>
          <b>#</b> Данное приложение реализовано на языке <b>Type Script</b> с
          помощью <b>JavaScript</b>
          -библиотеки – <b>React</b>, с использованием стейт менеджера{" "}
          <b>Redux</b>.
          <br />
          <b>#</b> В ходе работы над приложением был инициализирован стор&#40;
          <b>store</b>&#41; с помощью импортированной функции <b>createStore</b>{" "}
          из <b>Redux</b>. Создано два редьюсера&#40;userReducer и
          todoReducer&#41;.
          <br />
          <br />
          <b>#</b> В userReducer происходит взаимодействие со списком
          пользователей. Было проинициализировано дефолтное состояние для списка
          пользователей, а также типизировано при помощи созданного
          интерфейса&#40;:UserState&#41;. Создано три экшена: идентификация
          загрузки пользователей с сервера &#40;FETCH_USERS&#41;, успешная
          загрузка пользователей с сервера &#40;FETCH_USERS_SUCCESS&#41; и
          ошибка при загрузке пользователей &#40;FETCH_USERS_ERROR&#41;. Для
          каждого экшена был создан свой интерфейс и на основе этих интерфейсов
          был создан тип для экшена, который принимает редьюсер.
          <br />
          <br />
          <b>#</b> В todoReducer происходит взаимодействие со списком задач.
          Было проинициализировано дефолтное состояние для списка задач, а также
          типизировано при помощи созданного интерфейса&#40;:TodoState&#41;.
          Создано четыре экшена: идентификация загрузки задач с
          сервера&#40;FETCH_TODOS&#41;, успешная загрузка задач с
          сервера&#40;FETCH_TODOS_SUCCESS&#41;, ошибка при загрузке
          задач&#40;FETCH_TODOS_ERROR&#41; и получение номера страницы для
          загрузки и отображения списка задач&#40;SET_TODO_PAGE&#41;. Для
          каждого экшена был создан свой интерфейс и на основе этих интерфейсов
          был создан тип UserAction для экшена, который принимает редьюсер.
          <br />
          <br />
          <b>#</b> Импортирована функция <b>combineReducers</b> из Redux для
          объединения двух редьюсеров. Импортирован компонент <b>Provider</b> из{" "}
          <b>React-redux</b> для доступа к стор. Созданные компоненты UserList и
          TodoList были типизированы, как функциональные.
          <br />
          <br />
          <b>#</b> Создан кастомный хук useTypedSelector для взаимодействия с
          состоянием из компонентов, типизирован при помощи типа{" "}
          <b>TypedUseSelectorHook</b>, который параметром принимает RootState
          получаемый из типа ресьюсера rootReducer при помощи <b>ReturnType</b>.
          <br />
          <br />
          <b>#</b> Создано два экшен генератора&#40; <b>action creators</b>
          &#41;для получения данных с сервера. В экшен генераторе для списка
          пользователей создана функция, в которой происходят асинхронные
          действия, в результате которых вызывается функция dispatch
          типизированная типом <b>Dispatch</b> из <b>Redux</b>, который
          параметром принимает тип экшенов отвечающие за изменения состояния
          списка пользователей&#40;UserAction&#41;. В экшен генераторе для
          списка задач создана функция, в которой происходят асинхронные
          действия, в результате которых вызывается функция <b>dispatch</b>{" "}
          типизированная типом <b>Dispatch</b> из <b>Redux</b>, который
          параметром принимает тип экшенов отвечающие за изменения состояния
          списка задач&#40;TodoAction&#41;, а также создана функция возвращающая
          экшен для получения номера страницы списка задач.
          <br />
          <br />
          <b>#</b> Создан кастомный хук useActions, в котором связываем экшен
          генераторы с функцией dispatch, которую получаем при помощи хука{" "}
          <b>useDispatch</b> из React-redux. Связывание происходит благодаря
          функции <b>bindActionCreators</b> из <b>Redux</b>.
          <br />
          <br />
          <b>Вывод</b>: Разработка приложения на <b>Type Script</b> расширяет
          стандартные возможности языка <b>Java Script</b>. Главным
          преимуществом является явное указание типов на этапе разработки что
          исключает множество потенциальных ошибок и тем самым облегчает
          разработку.
        </p>
      </div>
    </div>
  );
}
